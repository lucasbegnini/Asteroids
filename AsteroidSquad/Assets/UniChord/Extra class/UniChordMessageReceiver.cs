using UnityEngine;using System.Collections;// UniChordMessageReceiver recieve message from Chord listner in android java.// And It call funtions of UniChord listners by message.public class UniChordMessageReceiver : MonoBehaviour{
    // ------- Message from android java about IChordManagerListener ------------    // The error is occurred.    void onError(string error_int )    {        UniChordManagerListener.ERROR error = (UniChordManagerListener.ERROR)int.Parse(error_int);        Debug.Log("[UniChordManagerListener][onError] error=" + error);        UniChordManagerListener listener = UniChordManager.GetListener();        if (listener != null)            listener.onError(error);    }    // Called when the network is disconnected.    void onNetworkDisconnected()    {        Debug.Log("[UniChordManagerListener][onNetworkDisconnected]");        UniChordManagerListener listener = UniChordManager.GetListener();        if (listener != null)            listener.onNetworkDisconnected();    }    // Called when the Chord has started successfully.    void onStarted(string packed_string)    {        string[] arg = UniChordPackedString.DeserializePacket(packed_string);        // nodeName        string nodeName = arg[0];        // Reson        UniChordManagerListener.REASON reason = (UniChordManagerListener.REASON)int.Parse(arg[1]);        Debug.Log("[UniChordManagerListener][onStarted] nodeName=" + nodeName + ", reason=" + reason);        UniChordManagerListener listener = UniChordManager.GetListener();        if (listener != null)            listener.onStarted(nodeName, reason);    }


    // ------- Message from android java about ChordManager.INetworkListener ------------        // It is called a when specific interface is connected    void onConnected(string interfaceType_int)    {        UniChordManager.INTERFACE_TYPE interfaceType = (UniChordManager.INTERFACE_TYPE)int.Parse(interfaceType_int);        Debug.Log("[UniChordManagerNetworkListener][onConnected] interfaceType=" + interfaceType);        UniChordManagerNetworkListener listener = UniChordManager.GetNetworkListener();        if (listener != null)            listener.onConnected(interfaceType);    }        // It is called when a specific interface is disconnected    void onDisconnected(string interfaceType_int)    {        UniChordManager.INTERFACE_TYPE interfaceType = (UniChordManager.INTERFACE_TYPE)int.Parse(interfaceType_int);        Debug.Log("[UniChordManagerNetworkListener][onDisconnected] interfaceType=" + interfaceType);        UniChordManagerNetworkListener listener = UniChordManager.GetNetworkListener();        if (listener != null)            listener.onDisconnected(interfaceType);    }


    // ------- Message from android java about IChannelListener ------------    // Called when the data message received from the node.    void onDataReceived(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string fromNode     = decomp_datas[0];        string fromChannel  = decomp_datas[1];        string payloadType  = decomp_datas[2];        string[] payload = null;        if (decomp_datas.Length > 3)        {            payload = new string[decomp_datas.Length - 3];            int index = 0;            for (int i = 3; i < decomp_datas.Length; i++)                payload[index++] = decomp_datas[i];        }        Debug.Log("[UniChordChannelListener][onDataReceived] fromNode=" + fromNode + ", fromChannel=" + fromChannel + ", payloadType=" + payloadType + ", payload=" + payload);        UniChordChannelListener listener = UniChordManager.GetChannelListener(fromChannel);        if (listener != null)            listener.onDataReceived(fromNode, fromChannel, payloadType, payload);    }    // Called when an individual chunk of the file is received.    void onFileChunkReceived(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string fromNode     = decomp_datas[0];        string fromChannel  = decomp_datas[1];        string fileName     = decomp_datas[2];        string hash         = decomp_datas[3];        string fileType     = decomp_datas[4];        string exchangeId   = decomp_datas[5];        long fileSize       = long.Parse(decomp_datas[6]);        long offset         = long.Parse(decomp_datas[7]);        Debug.Log("[UniChordChannelListener][onFileChunkReceived] fromNode=" + fromNode + ", fromChannel=" + fromChannel + ", fileName=" + fileName +                  ", hash=" + hash + ", fileType=" + fileType + ", exchangeId=" + exchangeId + ", fileSize=" + fileSize + ", offset=" + offset);        UniChordChannelListener listener = UniChordManager.GetChannelListener(fromChannel);        if (listener != null)            listener.onFileChunkReceived(fromNode, fromChannel, fileName, hash, fileType, exchangeId, fileSize, offset);    }    // Called when an individual chunk of the file is sent.    void onFileChunkSent(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string toNode       = decomp_datas[0];        string toChannel    = decomp_datas[1];        string fileName     = decomp_datas[2];        string hash         = decomp_datas[3];        string fileType     = decomp_datas[4];        string exchangeId   = decomp_datas[5];        long fileSize       = long.Parse(decomp_datas[6]);        long offset         = long.Parse(decomp_datas[7]);        long chunkSize      = long.Parse(decomp_datas[8]);        Debug.Log("[UniChordChannelListener][onFileChunkSent] toNode=" + toNode + ", toChannel=" + toChannel + ", fileName=" + fileName +                  ", hash=" + hash + ", fileType=" + fileType + ", exchangeId=" + exchangeId + ", fileSize=" + fileSize + ", offset=" + offset + ", chunkSize=" + chunkSize);        UniChordChannelListener listener = UniChordManager.GetChannelListener(toChannel);        if (listener != null)            listener.onFileChunkSent(toNode, toChannel, fileName, hash, fileType, exchangeId, fileSize, offset, chunkSize);    }    // Called when the error is occurred while the file transfer is in progress.    void onFileFailed(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string node     = decomp_datas[0];        string channel  = decomp_datas[1];        string fileName = decomp_datas[2];        string hash     = decomp_datas[3];        string exchangeId = decomp_datas[4];        int reason_int  = int.Parse(decomp_datas[5]);        UniChordChannelListener.REASON reason = (UniChordChannelListener.REASON)reason_int;        Debug.Log("[UniChordChannelListener][onFileFailed] node=" + node + ", channel=" + channel + ", fileName=" + fileName +                  ", hash=" + hash + ", exchangeId=" + exchangeId + ", reason=" + reason + "(" + reason_int + ")" );        UniChordChannelListener listener = UniChordManager.GetChannelListener(channel);        if (listener != null)            listener.onFileFailed(node, channel, fileName, hash, exchangeId, reason);    }    // Called when the file transfer is completed from the node.    void onFileReceived(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string fromNode     = decomp_datas[0];        string fromChannel  = decomp_datas[1];        string fileName     = decomp_datas[2];        string hash         = decomp_datas[3];        string fileType     = decomp_datas[4];        string exchangeId   = decomp_datas[5];        long fileSize       = long.Parse(decomp_datas[6]);        string tmpFilePath  = decomp_datas[7];        Debug.Log("[UniChordChannelListener][onFileReceived] fromNode=" + fromNode + ", fromChannel=" + fromChannel + ", fileName=" + fileName +                  ", hash=" + hash + ", fileType=" + fileType + ", exchangeId=" + exchangeId + ", fileSize=" + fileSize + ", tmpFilePath=" + tmpFilePath);        UniChordChannelListener listener = UniChordManager.GetChannelListener(fromChannel);        if (listener != null)            listener.onFileReceived(fromNode, fromChannel, fileName, hash, fileType, exchangeId, fileSize, tmpFilePath);    }    // Called when the file transfer is completed to the node.    void onFileSent(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string toNode       = decomp_datas[0];        string toChannel    = decomp_datas[1];        string fileName     = decomp_datas[2];        string hash         = decomp_datas[3];        string fileType     = decomp_datas[4];        string exchangeId   = decomp_datas[5];        Debug.Log("[UniChordChannelListener][onFileSent] toNode=" + toNode + ", toChannel=" + toChannel + ", fileName=" + fileName +                  ", hash=" + hash + ", fileType=" + fileType + ", exchangeId=" + exchangeId);        UniChordChannelListener listener = UniChordManager.GetChannelListener(toChannel);        if (listener != null)            listener.onFileSent(toNode, toChannel, fileName, hash, fileType, exchangeId);    }    // Called when the Share file notification is received.    void onFileWillReceive(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string fromNode     = decomp_datas[0];        string fromChannel  = decomp_datas[1];        string fileName     = decomp_datas[2];        string hash         = decomp_datas[3];        string fileType     = decomp_datas[4];        string exchangeId   = decomp_datas[5];        long fileSize       = long.Parse(decomp_datas[6]);                Debug.Log("[UniChordChannelListener][onFileWillReceive] fromNode=" + fromNode + ", fromChannel=" + fromChannel + ", fileName=" + fileName +                  ", hash=" + hash + ", fileType=" + fileType + ", exchangeId=" + exchangeId + ", fileSize=" + fileSize);        UniChordChannelListener listener = UniChordManager.GetChannelListener(fromChannel);        if (listener != null)            listener.onFileWillReceive(fromNode, fromChannel, fileName, hash, fileType, exchangeId, fileSize);    }    // Called when a node join event is raised on the channel.    void onNodeJoined(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string fromNode     = decomp_datas[0];        string fromChannel  = decomp_datas[1];        Debug.Log("[UniChordChannelListener][onNodeJoined] fromNode=" + fromNode + ", fromChannel=" + fromChannel);        UniChordChannelListener listener = UniChordManager.GetChannelListener(fromChannel);        if (listener != null)            listener.onNodeJoined(fromNode, fromChannel);    }    // Called when a node leave event is raised on the channel.    void onNodeLeft(string data_packet)    {        string[] decomp_datas = UniChordPackedString.DeserializePacket(data_packet);        string fromNode = decomp_datas[0];        string fromChannel = decomp_datas[1];        Debug.Log("[UniChordChannelListener][onNodeLeft] fromNode=" + fromNode + ", fromChannel=" + fromChannel);        UniChordChannelListener listener = UniChordManager.GetChannelListener(fromChannel);        if (listener != null)            listener.onNodeLeft(fromNode, fromChannel);    }    }