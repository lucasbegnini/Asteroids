using UnityEngine;using System.Collections; // This class work instead of IChordChannel in unity3d.  public class UniChordChannel{    public UniChordChannel(string channel_name)    {        _channel_name = channel_name;    }    static readonly string JAVACLASSNAME = "com.zne.unichord.UniChordChannel";    string _channel_name;    // Accept to receive file.    public bool acceptFile(string exchangeId, long chunkTimeoutMsec, int chunkRetries, long chunkSize)    {        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        bool ret = jc.CallStatic<bool>("acceptFile", _channel_name, exchangeId, chunkTimeoutMsec, chunkRetries, chunkSize);        return ret;    }    // Cancel file transfer.    public bool cancelFile(string exchangeId)    {        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        bool ret = jc.CallStatic<bool>("cancelFile", _channel_name, exchangeId);        return ret;    }    // Requests for nodes on the channel.    public string[] getJoinedNodeList()    {        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        string packed_string = jc.CallStatic<string>("getJoinedNodeList", _channel_name);        return UniChordPackedString.DeserializePacket(packed_string);    }    // Get the channel name.    public string getName()    {        return _channel_name;    }        // Get an IPv4 address that the node has.    public string getNodeIpAddress(string nodeName)    {        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        string ip_address = jc.CallStatic<string>("getNodeIpAddress", _channel_name, nodeName);        return ip_address;    }    // Determine whether the input is matched with own channel name or not.    public bool isName(string channelName)    {        return (_channel_name == channelName);    }    // Reject to receive file.    public bool rejectFile(string exchangeId)    {        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        bool ret = jc.CallStatic<bool>("rejectFile", _channel_name, exchangeId);        return ret;    }        // Send data message to the node.    // [Note] We can't call with byte[][] in Unity3d to android java. So, We use string.    public bool sendData(string toNode, string payloadType, string[] payload)    {        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        string packed_payload = UniChordPackedString.SerializePacket(payload);        bool ret = jc.CallStatic<bool>("sendData", _channel_name, toNode, payloadType, packed_payload);        return ret;    }    // Send data message to the all nodes on the channel.    // [Note] We can't call with byte[][] in Unity3d to android java. So, We use string.    public bool sendDataToAll(string payloadType, string[] payload)    {        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        string packed_payload = UniChordPackedString.SerializePacket(payload);        bool ret = jc.CallStatic<bool>("sendDataToAll", _channel_name, payloadType, packed_payload);        return ret;    }    // Send file to specific node on the channel.    public string sendFile(string toNode, string fileType, string filePath, long timeoutMsec)    {        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        string exchangedId = jc.CallStatic<string>("sendFile", _channel_name, toNode, fileType, filePath, timeoutMsec);        return exchangedId;    }    }