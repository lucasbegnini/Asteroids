using UnityEngine;using System.Collections;using System.Collections.Generic; // This class work instead of IChordChannelListener in unity3d. // You must make child class of this class.// And override functions. public class UniChordChannelListener{    public enum REASON    {        ERROR_FILE_CANCELED = 2002, // File sending or receiving canceled.        ERROR_FILE_CREATE_FAILED = 2003, // Fail to create a file is sent on the receiver.        ERROR_FILE_NO_RESOURCE = 2004, // Memory allocation failed.        ERROR_FILE_REJECTED = 2001, // Receiver rejects the file transfer.        ERROR_FILE_SEND_FAILED = 2000, // Fail to send.        ERROR_FILE_TIMEOUT = 2005, // File transfer timeout.    }    Dictionary<string,UniChordChannel> _channel_dic = new Dictionary<string,UniChordChannel>();    // It's must called by UniChordManager    public void AddChannel( string channel_name, UniChordChannel channel )    {        if (_channel_dic.ContainsKey(channel_name))            _channel_dic[channel_name] = channel;        else            _channel_dic.Add(channel_name, channel);    }    // It's must called by UniChordManager    public void DelChannel(string channel_name)    {        if (_channel_dic.ContainsKey(channel_name))            _channel_dic.Remove( channel_name );    }    // Get UniChordChannel by channel name    public UniChordChannel GetChannel(string channel_name)    {        if (_channel_dic.ContainsKey(channel_name))            return _channel_dic[channel_name];        return null;    }    // Called when the data message received from the node.    public virtual void onDataReceived(string fromNode, string fromChannel, string payloadType, string[] payload)    {    }    // Called when an individual chunk of the file is received.    public virtual void onFileChunkReceived(string fromNode, string fromChannel, string fileName, string hash, string fileType, string exchangeId, long fileSize, long offset)    {    }    // Called when an individual chunk of the file is sent.    public virtual void onFileChunkSent(string toNode, string toChannel, string fileName, string hash, string fileType, string exchangeId, long fileSize, long offset, long chunkSize)    {    }    // Called when the error is occurred while the file transfer is in progress.    public virtual void onFileFailed(string node, string channel, string fileName, string hash, string exchangeId, REASON reason)    {    }    // Called when the file transfer is completed from the node.    public virtual void onFileReceived(string fromNode, string fromChannel, string fileName, string hash, string fileType, string exchangeId, long fileSize, string tmpFilePath)    {
        // [Note] The real name of saved file is not in 'fileName'. It is in 'tmpFilePath'.    }    // Called when the file transfer is completed to the node.    public virtual void onFileSent(string toNode, string toChannel, string fileName, string hash, string fileType, string exchangeId)    {    }    // Called when the Share file notification is received.    public virtual void onFileWillReceive(string fromNode, string fromChannel, string fileName, string hash, string fileType, string exchangeId, long fileSize)    {    }    // Called when a node join event is raised on the channel.    public virtual void onNodeJoined(string fromNode, string fromChannel)    {    }    // Called when a node leave event is raised on the channel.    public virtual void onNodeLeft(string fromNode, string fromChannel)    {    }}