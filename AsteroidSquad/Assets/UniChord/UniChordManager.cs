using UnityEngine;using System.Collections;using System.Collections.Generic; // This class work instead of ChordManager in unity3d. public class UniChordManager{        public enum INTERFACE_TYPE    {        WIFI = 0,        WIFIP2P = 1,        WIFIAP = 2,    }    public enum ERROR    {        NOT_INITIALIZED = -1, // UniChord internal error, not for native Chord SDK.        NONE = 0,        FAILED = 1,           // Operation failed.        INVALID_PARAM = 2,    // Invalid parameter.        INVALID_STATE = 3,    // Invalid state. specific operations are not allowed.        INVALID_INTERFACE = 4,// Invalid interface.    }    // Chord public channel name.    public static readonly string PUBLIC_CHANNEL = "Chord";        static string JAVACLASSNAME = "com.zne.unichord.UniChordManager";    static UniChordManager                      _instance;    static UniChordManagerListener              _listener;    static UniChordManagerNetworkListener       _network_listener;    static Dictionary<string, UniChordChannel>  _channels = new Dictionary<string,UniChordChannel>();    static Dictionary<string, UniChordChannelListener>                                                 _channel_listeners = new Dictionary<string, UniChordChannelListener>();    AndroidJavaObject               _java_object;        // Constructor.    private UniChordManager(AndroidJavaObject java_object)    {        _java_object = java_object;    }    public static UniChordManagerListener GetListener()    {        return _listener;    }    public static UniChordManagerNetworkListener GetNetworkListener()    {        return _network_listener;    }    public static UniChordChannelListener GetChannelListener(string channel_name)    {        if (_channel_listeners.ContainsKey(channel_name))            return _channel_listeners[channel_name];        return null;    }    // Check if Android API LEVEL >= 14 (IceCream)     static public bool IsSupported()    {        // API level 14 부터 Chord SDK를 사용할 수 있다.        AndroidJavaClass jc = new AndroidJavaClass(JAVACLASSNAME);        bool ret = jc.CallStatic<bool>("IsSupported");        return ret;    }    private static void CreateMessageReceiver()    {        GameObject message_receiver_obj = GameObject.Find("UniChordMessageReceiver");        if( message_receiver_obj == null )        {            message_receiver_obj = new GameObject("UniChordMessageReceiver");            message_receiver_obj.AddComponent<UniChordMessageReceiver>();            GameObject.DontDestroyOnLoad(message_receiver_obj);        }    }    private static void DestroyMessageReceiver()    {        GameObject message_receiver_obj = GameObject.Find("UniChordMessageReceiver");        if( message_receiver_obj != null )            GameObject.Destroy(message_receiver_obj);    }



    // ----------------- Functions about ChordManager -----------------------    // Get a UniChordManager instance.    public static UniChordManager getInstance( AndroidJavaObject context )    {        if( _instance == null )        {            // Create UniChordManager JavaObjet            AndroidJavaObject java_object = new AndroidJavaObject(JAVACLASSNAME);            bool ret = java_object.Call<bool>("getInstance", context);            if (ret)            {                CreateMessageReceiver();                _instance = new UniChordManager(java_object);                Debug.Log("UniChordManager getInstance success!!");            }            else            {                Debug.Log("UniChordManager getInstance failed!!");            }        }        return _instance;    }    // Get a list of available network interface types.    public List<INTERFACE_TYPE> getAvailableInterfaceTypes()    {        int[] able_types = _java_object.Call<int[]>("getAvailableInterfaceTypes");        if (able_types != null && able_types.Length > 0)        {            List<INTERFACE_TYPE> able_type_list = new List<INTERFACE_TYPE>();            foreach (int type in able_types)            {                INTERFACE_TYPE interface_type = (INTERFACE_TYPE)type;                able_type_list.Add(interface_type);            }            return able_type_list;        }        return null;    }    // Get own IPv4 address.    public string getIp()    {        string ip = _java_object.Call<string>("getIp");        return ip;    }    // Request the channel interface for the specific channel name.    public UniChordChannel getJoinedChannel(string channelName)    {        if (_channels.ContainsKey(channelName))            return _channels[channelName];        return null;    }    // Request for joined channel interfaces.    public List<UniChordChannel> getJoinedChannelList()    {        return new List<UniChordChannel>(_channels.Values);    }    // Get own node name.    public string getName()    {        string name = _java_object.Call<string>("getName");        return name;    }    // Join a desired channel with a given listener.    public UniChordChannel joinChannel(string channelName, UniChordChannelListener listener)    {        // Check if already joined        if( getJoinedChannel(channelName) != null )            return null;        // Register channel and listener        UniChordChannel channel = new UniChordChannel(channelName);        listener.AddChannel(channelName, channel);        _channels.Add(channelName, channel);        _channel_listeners.Add(channelName, listener);        bool ret = _java_object.Call<bool>("joinChannel", channelName);        if (ret)        {            return channel;        }        else        {            // Join failed, Unregister channel and listener            listener.DelChannel(channelName);            _channels.Remove(channelName);            _channel_listeners.Remove(channelName);        }                return null;    }    // Leave a given channel.    public void leaveChannel(string channelName)    {        _java_object.Call("leaveChannel", channelName);        // Unregister channel and listener        if( _channels.ContainsKey(channelName) )            _channels.Remove(channelName);        if (_channel_listeners.ContainsKey(channelName))            _channel_listeners.Remove(channelName);    }    // Set a looper object associated with thread for processing callback methods.    public void setHandleEventLooper(AndroidJavaObject looper)    {        _java_object.Call("setHandleEventLooper", looper);    }    // Set callbacks when connection info is changed.    public bool setNetworkListener(UniChordManagerNetworkListener listener)    {        bool ret = _java_object.Call<bool>("setNetworkListener");        if (ret)            _network_listener = listener;        return ret;    }    // Set a keep-alive timeout.    public void setNodeKeepAliveTimeout(long timeoutMsec)    {        _java_object.Call("setNodeKeepAliveTimeout", timeoutMsec);    }    // Set a directory path to save receiving file temporarily.    public void setTempDirectory(string tmpDirPath)    {        _java_object.Call("setTempDirectory", tmpDirPath);    }    // Start Chord.    public ERROR start(INTERFACE_TYPE interfaceType, UniChordManagerListener listener)    {        ERROR error = (ERROR)_java_object.Call<int>("start", (int)interfaceType);        if (error == ERROR.NONE)        {            _listener = listener;        }        return error;    }    // Stop chord.    public void stop()    {        _java_object.Call("stop");        _instance           = null;        _java_object        = null;        _listener           = null;        _network_listener   = null;        _channels.Clear();        _channel_listeners.Clear();        DestroyMessageReceiver();    }    // ---------------------------------------------------------------}